import { BotContext, ChatMessage, ChatRole } from "./types"
import Logger from "js-logger"
import { message } from "telegraf/filters"
import { code } from 'telegraf/format'
import { getSession, resetSession } from "./session"
import { convert, download, remove } from "./voice"
import { Message } from "telegraf/typings/core/types/typegram"
import { openai } from "./openai"
import { chatMessage } from "./chat"
import { FmtString } from "telegraf/format"
import { getRandomFromArray } from "./utils"
import { characterKeyboard, roleKeyboard, settingsKeyboard } from "./keyboard"
import { SettingsAction, getCharacterSystemMessages, getRoleSystemMessages } from "./settings"

export const help = async (ctx: BotContext) => {
    const session = await getSession(ctx)
    const message = `
*telegramId*: ${session.telegramId}
*firstname*: ${session.firstname}
    `
    ctx.replyWithMarkdownV2(message)
}

export const start = async (ctx: BotContext) => {
    const session = await getSession(ctx)
    ctx.replyWithMarkdownV2('üëã –ü—Ä–∏–≤–µ—Ç–∏–∫–∏, *' + session.firstname + '*\\!');
}

export async function hearsVoice(ctx: BotContext) {
    try {
        if (!ctx.has(message("voice"))) {
            throw new Error("–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å, –Ω–æ –µ–≥–æ –Ω–µ—Ç")
        }
        const session = await getSession(ctx)
        ctx.telegram.sendChatAction(ctx.chat.id, 'typing')
        const link = await ctx.telegram.getFileLink(ctx.message.voice.file_id)
        const userId = String(ctx.message.from.id)
        const ogg = await download(link.href, userId)
        const mp3 = await convert(ogg)
        await remove(ogg)
        const text = await openai.transcription(mp3)
        await ctx.reply(code(text))
        await ctx.telegram.sendChatAction(ctx.chat.id, 'typing')
        await remove(mp3)
        const answer = await chatMessage(session, text)
        await ctx.reply(answer, { reply_to_message_id: ctx.message.message_id })
    } catch (e: any) {
        errorReply(ctx, e)
    }
}

export async function hearsText(ctx: BotContext) {
    try {
        if (!ctx.has(message("text"))) {
            throw new Error("–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç, –Ω–æ –µ–≥–æ –Ω–µ—Ç")
        }
        const session = await getSession(ctx)
        await ctx.telegram.sendChatAction(ctx.chat.id, 'typing')
        const answer = await chatMessage(session, ctx.message.text)
        ctx.reply(answer, { reply_to_message_id: ctx.message.message_id })
    } catch (e: any) {
        errorReply(ctx, e)
    }
}

export async function reset(ctx: BotContext) {
    try {
        const session = await resetSession(ctx)
        Logger.debug("Reset session: ", session)
        await ctx.reply(getRandomFromArray([
            "–õ–∞–¥–Ω–æ, –∑–∞–∫—Ä–æ–µ–º —Ç–µ–º—É üëå",
            "–í–æ—Ç —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è –∞–º–Ω–µ–∑–∏—è - —Å—Ä–∞–∑—É –≤—Å–µ –∑–∞–±—ã–ª ü§∑‚Äç‚ôÇÔ∏è",
            "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–º üí≠",
            "–ù–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É—Ç–µ—Ä—è–Ω–∞ üôà",
            "–û–π, –æ–ø—è—Ç—å –∑–∞–±—ã–ª, –∫—Ç–æ —è, –≥–¥–µ —è –∏ –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–º üòµ",
        ]))
    } catch (e: any) {
        errorReply(ctx, e)
    }
}

export async function settings(ctx: BotContext) {
    try {
        await ctx.reply(getRandomFromArray([
            "–Ø –º–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–≤–æ–ø–ª–æ—â–µ–Ω–∏–π üòâ",
        ]), settingsKeyboard)
    } catch (e: any) {
        errorReply(ctx, e)
    }
}

export async function settingsCallback(ctx: BotContext) {
    try {
        // @ts-ignore
        const action = ctx.callbackQuery?.data;
        switch (action) {
            case SettingsAction.SelectRole:
                ctx.editMessageReplyMarkup(roleKeyboard.reply_markup)
                break
            case SettingsAction.SelectCharacter:
                ctx.editMessageReplyMarkup(characterKeyboard.reply_markup)
                break
            default:
                throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ \`${action}\``)
        }
    } catch (e: any) {
        errorReply(ctx, e)
    }
}

export async function roleCallback(ctx: BotContext) {
    try {
        // @ts-ignore
        const action = ctx.callbackQuery?.data;
        const session = await getSession(ctx)
        const systemMessages = await getRoleSystemMessages(action)
        session.systemMessages.role = systemMessages.map(content => ({ content, role: ChatRole.System }))
        await ctx.answerCbQuery(getRandomFromArray([
            "–ü–µ—Ä–µ–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ üé≠",
            "–ú–µ–Ω—è –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–¥–º–µ–Ω–∏–ª–∏ üí´",
            "–í—Ö–æ–∂—É –≤ –Ω–æ–≤—É—é —Ä–æ–ª—å üíÑ",
        ]))
        return ctx.deleteMessage()
    } catch (e: any) {
        errorReply(ctx, e)
    }
}

export async function characterCallback(ctx: BotContext) {
    try {
        // @ts-ignore
        const action = ctx.callbackQuery?.data;
        const session = await getSession(ctx)
        const systemMessages = await getCharacterSystemMessages(action)
        session.systemMessages.character = systemMessages.map(content => ({ content, role: ChatRole.System }))
        await ctx.answerCbQuery(getRandomFromArray([
            "–Ø —Å—Ç–∞–ª –¥—Ä—É–≥–∏–º üßë‚Äçüé®",
            "–Ø –ø—Ä–µ—Ç–µ—Ä–ø–µ–ª –º–µ—Ç–∞–º–æ—Ä—Ñ–æ–∑—É üêõü¶ã",
            "–ü—Ä–µ—Ç–µ—Ä–ø–µ–ª —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é üåÄ",
        ]))
        return ctx.deleteMessage()
    } catch (e: any) {
        errorReply(ctx, e)
    }
}


const editMessage = (ctx: BotContext, waitMessage: Message.TextMessage, text: string | FmtString) => {
    return ctx.telegram.editMessageText(
        waitMessage.chat.id,
        waitMessage.message_id,
        undefined, // Use undefined to keep the original markup
        text
    );
}

const errorReply = (ctx: BotContext, error: any) => {
    ctx.reply("ü§¨ –ß—Ç–æ-—Ç–æ –º–Ω–µ –Ω–µ —Ö–æ—Ä–æ—à–æ... –ü–æ–∑–æ–≤–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    Logger.error("Error", error)
}